"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import re
from datetime import datetime

def view_file_processing_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    
    log_file = "rag_api.log"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ API –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤")
        return
    
    print("üìã –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ RAG API")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
    with open(log_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤
    file_processing_lines = []
    query_lines = []
    
    for line in lines:
        if "–§–ê–ô–õ –û–ë–†–ê–ë–û–¢–ê–ù" in line:
            file_processing_lines.append(line.strip())
        elif "–ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù" in line or "–ù–ê–ô–î–ï–ù–´ –î–û–ö–£–ú–ï–ù–¢–´" in line:
            query_lines.append(line.strip())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: {len(lines)}")
    print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(file_processing_lines)}")
    print(f"‚ùì –ó–∞–ø—Ä–æ—Å–æ–≤: {len([l for l in query_lines if '–ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù' in l])}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if file_processing_lines:
        print("üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("-" * 60)
        
        for line in file_processing_lines[-10:]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            match = re.search(r'–§–ê–ô–õ –û–ë–†–ê–ë–û–¢–ê–ù - ID: ([^,]+), –ò–º—è: ([^,]+), –¢–∏–ø: ([^,]+), –†–∞–∑–º–µ—Ä: ([^,]+), –ú–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ([^,]+), –û–±—Ä–∞–±–æ—Ç–∞–Ω LLM: ([^,]+)', line)
            if match:
                file_id, filename, file_type, size, method, llm_processed = match.groups()
                timestamp = line.split(' - ')[0]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                file_emoji = "üìÑ" if file_type == ".pdf" else "üìù" if file_type == ".txt" else "üìò" if file_type == ".docx" else "üìÅ"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏
                llm_emoji = "ü§ñ" if llm_processed == "–î–ê" else "üìñ"
                
                print(f"{timestamp} {file_emoji} {filename} {llm_emoji} {method}")
                print(f"   ID: {file_id[:8]}... | –†–∞–∑–º–µ—Ä: {size} | LLM: {llm_processed}")
                print()
    else:
        print("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if file_processing_lines:
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print("-" * 40)
        
        methods = {}
        llm_count = 0
        standard_count = 0
        
        for line in file_processing_lines:
            if "–û–±—Ä–∞–±–æ—Ç–∞–Ω LLM: –î–ê" in line:
                llm_count += 1
            elif "–û–±—Ä–∞–±–æ—Ç–∞–Ω LLM: –ù–ï–¢" in line:
                standard_count += 1
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            match = re.search(r'–ú–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ([^,]+)', line)
            if match:
                method = match.group(1)
                methods[method] = methods.get(method, 0) + 1
        
        print(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ LLM: {llm_count}")
        print(f"üìñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {standard_count}")
        print()
        
        print("üîß –ú–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        for method, count in methods.items():
            print(f"   {method}: {count}")
    
    print()
    print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: tail -f rag_api.log")

def view_recent_queries():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
    
    log_file = "rag_api.log"
    
    if not os.path.exists(log_file):
        return
    
    with open(log_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    recent_queries = []
    current_query = {}
    
    for line in lines:
        line = line.strip()
        if "–ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù" in line:
            if current_query:
                recent_queries.append(current_query)
            current_query = {"query": line, "docs": None, "answer": None}
        elif "–ù–ê–ô–î–ï–ù–´ –î–û–ö–£–ú–ï–ù–¢–´" in line and current_query:
            current_query["docs"] = line
        elif "–û–¢–í–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù" in line and current_query:
            current_query["answer"] = line
            recent_queries.append(current_query)
            current_query = {}
    
    if recent_queries:
        print("‚ùì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
        print("-" * 60)
        
        for i, query_data in enumerate(recent_queries[-5:], 1):
            timestamp = query_data["query"].split(' - ')[0]
            question = query_data["query"].split('–í–æ–ø—Ä–æ—Å: ')[1] if '–í–æ–ø—Ä–æ—Å: ' in query_data["query"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            print(f"{i}. {timestamp}")
            print(f"   –í–æ–ø—Ä–æ—Å: {question}")
            
            if query_data["docs"]:
                docs_info = query_data["docs"].split('–ù–ê–ô–î–ï–ù–´ –î–û–ö–£–ú–ï–ù–¢–´ - ')[1] if '–ù–ê–ô–î–ï–ù–´ –î–û–ö–£–ú–ï–ù–¢–´ - ' in query_data["docs"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print(f"   –î–æ–∫—É–º–µ–Ω—Ç—ã: {docs_info}")
            
            if query_data["answer"]:
                answer_info = query_data["answer"].split('–û–¢–í–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù - ')[1] if '–û–¢–í–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù - ' in query_data["answer"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print(f"   –û—Ç–≤–µ—Ç: {answer_info}")
            
            print()

def main():
    print("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ RAG API")
    print("=" * 60)
    
    view_file_processing_logs()
    print()
    view_recent_queries()

if __name__ == "__main__":
    main() 